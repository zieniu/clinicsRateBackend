// <auto-generated />
using System;
using ClinicsRate.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClinicsRate.Migrations
{
    [DbContext(typeof(ClinicRateDbContext))]
    [Migration("20181029200537_createDatabaseAndTable")]
    partial class createDatabaseAndTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClinicsRate.Models.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("City");

                    b.Property<int?>("DictCityId");

                    b.Property<int?>("DictProvinceId");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<double>("PositionX");

                    b.Property<double>("PositionY");

                    b.Property<string>("PostCode");

                    b.Property<int>("Province");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.HasIndex("DictCityId");

                    b.HasIndex("DictProvinceId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("ClinicsRate.Models.DictCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DictCities");
                });

            modelBuilder.Entity("ClinicsRate.Models.DictProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DictProvinces");
                });

            modelBuilder.Entity("ClinicsRate.Models.Opinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClinicId");

                    b.Property<string>("Description");

                    b.Property<int>("Rate");

                    b.Property<int?>("UserId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("UserId");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("ClinicsRate.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessLevel");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClinicsRate.Models.Clinic", b =>
                {
                    b.HasOne("ClinicsRate.Models.DictCity", "DictCity")
                        .WithMany("Clinics")
                        .HasForeignKey("DictCityId");

                    b.HasOne("ClinicsRate.Models.DictProvince", "DictProvince")
                        .WithMany("Clinics")
                        .HasForeignKey("DictProvinceId");
                });

            modelBuilder.Entity("ClinicsRate.Models.Opinion", b =>
                {
                    b.HasOne("ClinicsRate.Models.Clinic", "Clinic")
                        .WithMany("Opinions")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClinicsRate.Models.User", "User")
                        .WithMany("Opinions")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
